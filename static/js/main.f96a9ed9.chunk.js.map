{"version":3,"sources":["Login/login.tsx","Forgot-password/forgot-password.tsx","App.js","serviceWorker.js","index.js"],"names":["Login","auth0Client","auth0","WebAuth","domain","params","clientID","clientId","audience","apiAudience","redirectUri","callbackUrl","scope","responseType","useState","email","setEmail","password","setPassword","setSending","setErrors","login","username","hasError","errors","valiadtor","trim","errorElementId","Object","keys","element","document","getElementById","scrollIntoView","block","behavior","inline","focus","client","realm","err","authResult","message","error","description","success","className","Item","size","type","placeholder","value","onChange","e","target","Password","htmlType","onClick","preventDefault","href","ForgotPassword","changePassword","connection","result","App","path","exact","component","ResetPassword","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.f96a9ed9.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport valiadtor from \"validator\";\nimport params from \"../auth0-param.json\";\nimport auth0 from \"auth0-js\";\nimport \"./login.css\";\nimport { Input, Form, Button, message } from \"antd\";\nimport ForgotPassword from '../Forgot-password/forgot-password';\nimport \"antd/dist/antd.css\";\n\nconst Login = () => {\n  var auth0Client = new auth0.WebAuth({\n    domain: params.domain,\n    clientID: params.clientId,\n    audience: params.apiAudience,\n    redirectUri: params.callbackUrl,\n    scope: params.scope,\n    responseType: \"token id_token\",\n  });\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [sending, setSending] = useState(false);\n  const [errors, setErrors] = useState({});\n  const onSubmitHandler = (e: any) => {\n    e.preventDefault();\n    login(email, password);\n  };\n\n  \n\n  const login = (username: any, password: any) => {\n    let hasError = false;\n    const errors: any = {};\n    if (!valiadtor.trim(email)) {\n      errors.email = \"Please fill in\";\n      hasError = true;\n    }\n    if (!valiadtor.trim(password)) {\n      errors.email = \"Password is required\";\n      hasError = true;\n    }\n    setErrors(errors);\n    if (hasError) {\n      setSending(false);\n      return;\n    }\n    if (errors) {\n      const errorElementId = Object.keys(errors)[0];\n      const element = document.getElementById(errorElementId);\n      if (element) {\n        element.scrollIntoView({\n          block: \"center\",\n          behavior: \"smooth\",\n          inline: \"center\",\n        });\n        element.focus();\n      }\n    }\n    auth0Client.client.login(\n      {\n        realm: \"demo-db\",\n        username,\n        password,\n      },\n      (err: any, authResult: any) => {\n        if (err) {\n          message.error(err.description)\n          return;\n        }\n        if (authResult) {\n          message.success(\"Login Successfully\")\n        }\n      }\n    );\n  };\n  return (\n    <div className=\"wrapper\">\n      <div className=\"form-wrapper\">\n        <div className=\"login-title\">\n          <strong>Log in to Dashboard</strong>\n        </div>\n        <div className=\"container\">\n          <Form>\n            <Form.Item>\n              <Input\n                size=\"large\"\n                type=\"email\"\n                className=\"input\"\n                placeholder=\"Email\"\n                value={email}\n                onChange={(e) => {\n                  setEmail(e.target.value);\n                }}\n              />\n            </Form.Item>\n            <Form.Item>\n              <Input.Password className=\"input\" size=\"large\" \n              value={password}\n              onChange={(e)=>{setPassword(e.target.value)}}\n              />\n            </Form.Item>\n\n            <Form.Item>\n              <Button\n                type=\"primary\"\n                htmlType=\"submit\"\n                className=\"login-form-button\"\n                size='large'\n                onClick={onSubmitHandler}\n              >\n                Log in\n              </Button>\n            </Form.Item>\n          \n          </Form>\n          <a href=\"/reset\">forgot password?</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Login;\n","import React, { useState } from \"react\";\nimport \"../Forgot-password/reset.css\";\nimport params from \"../auth0-param.json\";\nimport auth0 from \"auth0-js\";\nimport { Form, Input, Button, message } from \"antd\";\nimport {useHistory} from 'react-router-dom'\n\n\n\nconst ForgotPassword = () => {\n  var auth0Client = new auth0.WebAuth({\n    domain: params.domain,\n    clientID: params.clientId,\n    audience: params.apiAudience,\n    redirectUri: params.callbackUrl,\n    scope: params.scope,\n    responseType: \"token id_token\",\n  });\n  const [email, setEmail] = useState(\"\");\n\n  const onResetPasswordHandler = (e: any) => {\n    \n    auth0Client.changePassword(\n      {\n        connection: \"demo-db\",\n        email,\n      },\n      (err: any, result: any) => {\n        if (err) {\n          \n        }else{\n            message.success(result)\n            \n\n        }\n       \n      }\n    );\n  };\n\n  const onSubmitHandler = (e: any) => {\n    e.preventDefault();\n    onResetPasswordHandler(email);\n  };\n\n  return (\n    <div className=\"wrapper\">\n      <div className=\"form-wrapper\">\n        <div className=\"login-title\">\n          <strong>Log in to Dashboard</strong>\n        </div>\n        <div className=\"container\">\n          <Form>\n            <Form.Item>\n              <Input\n                size=\"large\"\n                type=\"email\"\n                className=\"input\"\n                placeholder=\"Email\"\n                value={email}\n                onChange={(e) => {\n                  setEmail(e.target.value);\n                }}\n              />\n            </Form.Item>\n\n            <Form.Item>\n              <Button\n                type=\"primary\"\n                htmlType=\"submit\"\n                className=\"login-form-button\"\n                size=\"large\"\n                onClick={onSubmitHandler}\n              >\n                Send Reset\n              </Button>\n            </Form.Item>\n          </Form>\n          <a href=\"/\">Back to login</a>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default ForgotPassword;\n","import React from 'react';\nimport Login from './Login/login';\nimport './App.css';\nimport {BrowserRouter, Link,Route} from 'react-router-dom';\nimport ResetPassword from './Forgot-password/forgot-password';\n\nfunction App() {\n  return (\n \n   <BrowserRouter>\n     <Route path=\"/reset\" exact component={ResetPassword} />\n     <Route path=\"/\" component={Login} />\n   </BrowserRouter>\n   \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n\nReactDOM.render(\n  <React.StrictMode>    <App /></React.StrictMode>,\n\n  \n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}